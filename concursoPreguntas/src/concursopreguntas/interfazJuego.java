package concursopreguntas;

import javax.swing.JOptionPane;
import java.io.*;
import java.util.Date;

/**
 * @author Daniel Santamar√≠a Tavera
 */
public class interfazJuego extends javax.swing.JFrame {
    
    //Variables que se utilizan en cada juego
    Categoria categ1;
    Categoria categ2;
    Categoria categ3;
    Categoria categ4;
    Categoria categ5;
    int ronda;
    int numPregunta;
    int puntajeJugador;
    String nombreJugador;

    public interfazJuego() {
        initComponents();
        deshabilitarJuego();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblNombreJugador = new javax.swing.JLabel();
        txtNombreJugador = new javax.swing.JTextField();
        separador = new javax.swing.JSeparator();
        btnComenzar = new javax.swing.JButton();
        lblRonda = new javax.swing.JLabel();
        lblPregunta = new javax.swing.JLabel();
        lblPuntaje = new javax.swing.JLabel();
        scroll = new javax.swing.JScrollPane();
        pnlPregunta = new javax.swing.JTextPane();
        rbtnA = new javax.swing.JRadioButton();
        rbtnB = new javax.swing.JRadioButton();
        rbtnC = new javax.swing.JRadioButton();
        rbtnD = new javax.swing.JRadioButton();
        txtRonda = new javax.swing.JTextField();
        txtPregunta = new javax.swing.JTextField();
        txtPuntaje = new javax.swing.JTextField();
        btnContinuar = new javax.swing.JButton();
        btnRetirarse = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Concurso de preguntas");
        setResizable(false);

        lblNombreJugador.setText("Nombre del Participante:");

        btnComenzar.setText("Comenzar");
        btnComenzar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnComenzarMouseClicked(evt);
            }
        });
        btnComenzar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComenzarActionPerformed(evt);
            }
        });

        lblRonda.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblRonda.setText("Ronda");

        lblPregunta.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPregunta.setText("Pregunta:");

        lblPuntaje.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPuntaje.setText("Puntaje:");

        pnlPregunta.setEditable(false);

        rbtnA.setText("a");
        rbtnA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbtnAMouseClicked(evt);
            }
        });
        rbtnA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnAActionPerformed(evt);
            }
        });

        rbtnB.setText("b");
        rbtnB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbtnBMouseClicked(evt);
            }
        });
        rbtnB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnBActionPerformed(evt);
            }
        });

        rbtnC.setText("c");
        rbtnC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbtnCMouseClicked(evt);
            }
        });
        rbtnC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnCActionPerformed(evt);
            }
        });

        rbtnD.setText("d");
        rbtnD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbtnDMouseClicked(evt);
            }
        });
        rbtnD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnDActionPerformed(evt);
            }
        });

        txtRonda.setEditable(false);

        txtPregunta.setEditable(false);

        txtPuntaje.setEditable(false);

        btnContinuar.setText("Continuar");
        btnContinuar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnContinuarMouseClicked(evt);
            }
        });
        btnContinuar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnContinuarActionPerformed(evt);
            }
        });

        btnRetirarse.setText("Retirarse");
        btnRetirarse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRetirarseMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(separador, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblNombreJugador)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNombreJugador, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnComenzar)
                                .addGap(0, 13, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rbtnC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(rbtnD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(rbtnB, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(pnlPregunta, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                .addComponent(rbtnA, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblRonda)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtRonda, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblPregunta)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtPregunta, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(72, 72, 72)
                                        .addComponent(lblPuntaje)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtPuntaje, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(41, 41, 41)))))
                        .addContainerGap(12, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(134, 134, 134)
                .addComponent(btnContinuar, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRetirarse, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombreJugador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNombreJugador)
                    .addComponent(btnComenzar))
                .addGap(18, 18, 18)
                .addComponent(separador, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRonda)
                    .addComponent(lblPregunta)
                    .addComponent(lblPuntaje)
                    .addComponent(txtRonda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPregunta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPuntaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlPregunta, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtnA)
                .addGap(18, 18, 18)
                .addComponent(rbtnB)
                .addGap(18, 18, 18)
                .addComponent(rbtnC)
                .addGap(18, 18, 18)
                .addComponent(rbtnD)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnContinuar)
                    .addComponent(btnRetirarse))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnComenzarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnComenzarMouseClicked
        validarNombreJugador();
    }//GEN-LAST:event_btnComenzarMouseClicked

    private void rbtnAMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbtnAMouseClicked
        rbtnA.setSelected(true);
        rbtnB.setSelected(false);
        rbtnC.setSelected(false);
        rbtnD.setSelected(false);
    }//GEN-LAST:event_rbtnAMouseClicked

    private void rbtnBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbtnBMouseClicked
        rbtnA.setSelected(false);
        rbtnB.setSelected(true);
        rbtnC.setSelected(false);
        rbtnD.setSelected(false);
    }//GEN-LAST:event_rbtnBMouseClicked

    private void rbtnCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbtnCMouseClicked
        rbtnA.setSelected(false);
        rbtnB.setSelected(false);
        rbtnC.setSelected(true);
        rbtnD.setSelected(false);
    }//GEN-LAST:event_rbtnCMouseClicked

    private void rbtnDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbtnDMouseClicked
        rbtnA.setSelected(false);
        rbtnB.setSelected(false);
        rbtnC.setSelected(false);
        rbtnD.setSelected(true);
    }//GEN-LAST:event_rbtnDMouseClicked

    private void btnContinuarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnContinuarMouseClicked
        validarJuego();
    }//GEN-LAST:event_btnContinuarMouseClicked

    private void btnContinuarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnContinuarActionPerformed

    }//GEN-LAST:event_btnContinuarActionPerformed

    private void btnComenzarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComenzarActionPerformed
        validarNombreJugador();
    }//GEN-LAST:event_btnComenzarActionPerformed

    private void rbtnAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnAActionPerformed
        rbtnA.setSelected(true);
        rbtnB.setSelected(false);
        rbtnC.setSelected(false);
        rbtnD.setSelected(false);
    }//GEN-LAST:event_rbtnAActionPerformed

    private void rbtnBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnBActionPerformed
        rbtnA.setSelected(false);
        rbtnB.setSelected(true);
        rbtnC.setSelected(false);
        rbtnD.setSelected(false);
    }//GEN-LAST:event_rbtnBActionPerformed

    private void rbtnCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnCActionPerformed
        rbtnA.setSelected(false);
        rbtnB.setSelected(false);
        rbtnC.setSelected(true);
        rbtnD.setSelected(false);
    }//GEN-LAST:event_rbtnCActionPerformed

    private void rbtnDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnDActionPerformed
        rbtnA.setSelected(false);
        rbtnB.setSelected(false);
        rbtnC.setSelected(false);
        rbtnD.setSelected(true);
    }//GEN-LAST:event_rbtnDActionPerformed

    private void btnRetirarseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRetirarseMouseClicked
        int resp = JOptionPane.showConfirmDialog(this, "¬øEst√° seguro que desea retirarse del concurso?", "Retirada", JOptionPane.YES_NO_OPTION);
        if (resp == JOptionPane.YES_OPTION) {
            deshabilitarJuego();
            escribirArchivo("Retirada del participante");
        }
    }//GEN-LAST:event_btnRetirarseMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(interfazJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(interfazJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(interfazJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(interfazJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new interfazJuego().setVisible(true);
            }
        });
    }

    public void deshabilitarJuego() {
        //M√©todo que deshabilita los controles del tablero
        lblRonda.setVisible(false);
        lblPregunta.setVisible(false);
        lblPuntaje.setVisible(false);
        txtRonda.setVisible(false);
        txtPregunta.setVisible(false);
        txtPuntaje.setVisible(false);
        pnlPregunta.setVisible(false);
        scroll.setVisible(false);
        btnContinuar.setVisible(false);
        btnRetirarse.setVisible(false);
        rbtnA.setVisible(false);
        rbtnB.setVisible(false);
        rbtnC.setVisible(false);
        rbtnD.setVisible(false);
    }

    public void habilitarJuego() {
        //M√©todo que habilita los controles del tablero
        txtNombreJugador.setEditable(false);
        btnComenzar.setEnabled(false);
        lblRonda.setVisible(true);
        lblPregunta.setVisible(true);
        lblPuntaje.setVisible(true);
        txtRonda.setVisible(true);
        txtPregunta.setVisible(true);
        txtPuntaje.setVisible(true);
        pnlPregunta.setVisible(true);
        scroll.setVisible(true);
        btnContinuar.setVisible(true);
        btnRetirarse.setVisible(true);
        rbtnA.setVisible(true);
        rbtnB.setVisible(true);
        rbtnC.setVisible(true);
        rbtnD.setVisible(true);
    }

    public void asignarRonda() {
        //M√©todo que muestra la ronda que se est√° participando en una caja de texto
        txtRonda.setText(String.valueOf(ronda));
    }

    public void asignarPregunta() {
        //M√©todo que muestra el n√∫mero de pregunta de una ronda en una caja de texto
        txtPregunta.setText(String.valueOf(numPregunta));
    }

    public void asignarPuntaje() {
        //M√©todo que muestra el puntaje del participante en una caja de texto
        txtPuntaje.setText(String.valueOf(puntajeJugador));
    }

    public void validarNombreJugador() {
        //M√©todo que valida si el campo de texto del nombre del participante ha sido llenado para poder comenzar el concurso
        if (txtNombreJugador.getText().trim().equals("")) {
            deshabilitarJuego();
            JOptionPane.showMessageDialog(this, "No se puede comenzar el concurso sin digitar el nombre del participante", "Error al comenzar concurso", JOptionPane.ERROR_MESSAGE);
        } else {
            nombreJugador = txtNombreJugador.getText().trim();
            txtNombreJugador.setText(nombreJugador);
            ronda = 1;
            numPregunta = 1;
            puntajeJugador = 0;
            habilitarJuego();
            crearCategoria();
            jugar();
        }
    }

    public void jugar() {
        //M√©todo que prepara el tablero para cada pregunta que se va a mostrar en pantalla al participante
        rbtnA.setSelected(true);
        rbtnB.setSelected(false);
        rbtnC.setSelected(false);
        rbtnD.setSelected(false);
        asignarRonda();
        asignarPregunta();
        asignarPuntaje();
        String texto, A, B, C, D;
        switch (ronda) {
            case 1:
                texto = categ1.retornar(numPregunta, "texto");
                A = categ1.retornar(numPregunta, "a");
                B = categ1.retornar(numPregunta, "b");
                C = categ1.retornar(numPregunta, "c");
                D = categ1.retornar(numPregunta, "d");
                break;
            case 2:
                texto = categ2.retornar(numPregunta, "texto");
                A = categ2.retornar(numPregunta, "a");
                B = categ2.retornar(numPregunta, "b");
                C = categ2.retornar(numPregunta, "c");
                D = categ2.retornar(numPregunta, "d");
                break;
            case 3:
                texto = categ3.retornar(numPregunta, "texto");
                A = categ3.retornar(numPregunta, "a");
                B = categ3.retornar(numPregunta, "b");
                C = categ3.retornar(numPregunta, "c");
                D = categ3.retornar(numPregunta, "d");
                break;
            case 4:
                texto = categ4.retornar(numPregunta, "texto");
                A = categ4.retornar(numPregunta, "a");
                B = categ4.retornar(numPregunta, "b");
                C = categ4.retornar(numPregunta, "c");
                D = categ4.retornar(numPregunta, "d");
                break;
            case 5:
                texto = categ5.retornar(numPregunta, "texto");
                A = categ5.retornar(numPregunta, "a");
                B = categ5.retornar(numPregunta, "b");
                C = categ5.retornar(numPregunta, "c");
                D = categ5.retornar(numPregunta, "d");
                break;
            default:
                texto = "";
                A = "";
                B = "";
                C = "";
                D = "";
                break;
        }
        pnlPregunta.setText(texto);
        rbtnA.setText(A);
        rbtnB.setText(B);
        rbtnC.setText(C);
        rbtnD.setText(D);
    }

    public void validarJuego() {
        //M√©todo que v√°lida cada respuesta seleccionada por el jugador, comparando con la respuesta correcta que entrega la clase Categoria
        int acumuladoPuntos = 0;
        String correcta = "";
        String seleccionada = "";
        if (rbtnA.isSelected() == true) {
            seleccionada = rbtnA.getText();
        }
        if (rbtnB.isSelected() == true) {
            seleccionada = rbtnB.getText();
        }
        if (rbtnC.isSelected() == true) {
            seleccionada = rbtnC.getText();
        }
        if (rbtnD.isSelected() == true) {
            seleccionada = rbtnD.getText();
        }
        switch (ronda) {
            case 1:
                correcta = categ1.retornar(numPregunta, "correcta");
                acumuladoPuntos = categ1.getPuntaje();
                break;
            case 2:
                correcta = categ2.retornar(numPregunta, "correcta");
                acumuladoPuntos = categ2.getPuntaje();
                break;
            case 3:
                correcta = categ3.retornar(numPregunta, "correcta");
                acumuladoPuntos = categ3.getPuntaje();
                break;
            case 4:
                correcta = categ4.retornar(numPregunta, "correcta");
                acumuladoPuntos = categ4.getPuntaje();
                break;
            case 5:
                correcta = categ5.retornar(numPregunta, "correcta");
                acumuladoPuntos = categ5.getPuntaje();
                break;
            default:
                seleccionada = "";
                correcta = "";
                acumuladoPuntos = 0;
        }
        if (seleccionada.equals(correcta)) {
            if (numPregunta < 5) {
                numPregunta++;
                puntajeJugador = puntajeJugador + acumuladoPuntos;
                jugar();
            } else {
                if (ronda < 5) {
                    numPregunta = 1;
                    ronda++;
                    puntajeJugador = puntajeJugador + acumuladoPuntos;
                    JOptionPane.showMessageDialog(this, "En hora buena, ha avanzado a la siguiente categor√≠a, la cual aumenta la complejidad", "√âxitos", JOptionPane.INFORMATION_MESSAGE);
                    crearCategoria();
                    jugar();
                } else {
                    deshabilitarJuego();
                    JOptionPane.showMessageDialog(this, "¬°¬°Felicidades :D, ha ganado el concurso, es usted un verdadero conocedor de Colombia !!", "Fin del concurso", JOptionPane.INFORMATION_MESSAGE);
                    escribirArchivo("Concurso ganado");
                }
            }
        } else {
            deshabilitarJuego();
            JOptionPane.showMessageDialog(this, "Lo sentimos, ha perdido :(", "Fin del concurso", JOptionPane.ERROR_MESSAGE);
            escribirArchivo("Concurso perdido");
        }
    }

    public void escribirArchivo(String causa) {
        //M√©todo para escribir la informaci√≥n del concursante en un archivo plano al finalizar un juego
        File archivo;
        FileWriter escritor;
        BufferedWriter bufer;
        PrintWriter impresion;

        int aleatorio = crearAleatorio(900, 0);
        Date fecha = new Date();
        String fechaSistema = String.valueOf(fecha);
        String nombreArchivo = nombreJugador + aleatorio + ".txt";

        try {
            archivo = new File(nombreArchivo);
            escritor = new FileWriter(archivo);
            bufer = new BufferedWriter(escritor);
            impresion = new PrintWriter(bufer);

            escritor.write("Nombre del jugador: " + nombreJugador + ",");
            if (causa.equals("Concurso perdido")){
                escritor.append("\nPuntaje perdido: " + puntajeJugador + ",");
                puntajeJugador = 0;
            }
            escritor.append("\nPuntaje final obtenido: " + puntajeJugador + ",");
            escritor.append("\nN√∫mero de rondas participadas: " + ronda + ",");
            escritor.append("\nCausa de finalizaci√≥n del concurso: " + causa + ",");
            escritor.append("\nFecha: " + fechaSistema);

            escritor.close();
            bufer.close();
            JOptionPane.showMessageDialog(this, "Se ha creado un archivo txt con la informaci√≥n del concurso participado", "Informaci√≥n", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ha ocurrido un error: " + e + ", no se pudo crear el archivo", "Error al crear archivo", JOptionPane.ERROR_MESSAGE);
        }
    }

    int crearAleatorio(int x, int y) {
        //X indica el valor mayor del intervalo y Y indica el menor valor del intervalo
        int numGenerado = (int) (Math.random() * (x - y + 1) + y);
        return numGenerado;
    }

    public void crearCategoria() {
        /*M√©todo que genera las preguntas de cada categor√≠a, haciendo uso de la clase Categoria, a medida que el participante avanza en el juego
        El m√©todo genera un aleatorio entre 1 y 2 para seleccionar una de las dos preguntas disponibles para cada n√∫meral en cada ronda.
        */
        int aleatorio;
        switch (ronda) {
            case 1:
                categ1 = new Categoria(5);
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ1.insertar("¬øC√≥mo se llama el cantante colombiano que interpreta ‚ÄúLa camisa negra‚Äù?", "Juanes", "Luis Miguel", "Carlos Vives", "Andr√©s Cepeda", "Juanes");
                } else {
                    categ1.insertar("¬øEn cu√°l ciudad colombiana se lleva a cabo la feria de las Flores?", "Barranquilla", "Cali", "Medell√≠n", "Cartagena", "Medell√≠n");
                }
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ1.insertar("¬øCu√°les son los colores de la bandera colombiana?", "amarillo, azul y verde", "amarillo, azul y blanco", "blanco, verde y azul", "amarillo, azul y rojo", "amarillo, azul y rojo");
                } else {
                    categ1.insertar("¬øCu√°l ciudad colombiana es conocida por sus grandes murallas?", "Bogot√°", "Cartagena", "Medell√≠n", "Pereira", "Cartagena");
                }
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ1.insertar("¬øCu√°l ave se encuentra en el escudo colombiano?", "Una lechuza", "Un c√≥ndor", "Un √°guila", "Un b√∫ho", "Un c√≥ndor");
                } else {
                    categ1.insertar("¬øCon cu√°l personaje se identifica el caf√© colombiano en el mundo?", "Juan P√©rez", "Pedro Valdez", "Juan Valdez", "Camilo P√©rez", "Juan Valdez");
                }
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ1.insertar("¬øCu√°l pintor colombiano es conocido por sus cuadros de personajes gordos?", "Fernando Botero", "Alejandro Obreg√≥n", "Omar Rayo", "Enrique Grau", "Fernando Botero");
                } else {
                    categ1.insertar("¬øC√≥mo se llama el estadio de Medell√≠n?", "Metropolitano", "Pascual Guerrero", "Hern√°n Ram√≠rez", "Atanasio Girardot", "Atanasio Girardot");
                }
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ1.insertar("¬øCu√°l famoso pol√≠tico colombiano fue inmortalizado con su rostro en los billetes de mil pesos?", "Luis Carlos Gal√°n", "Alfonso L√≥pez Michelsen", "Jorge Eliecer Gait√°n", "Carlos Lleras Restrepo", "Jorge Eliecer Gait√°n");
                } else {
                    categ1.insertar("¬øCu√°l famoso escritor fue inmortalizado con su rostro en los billetes de cincuenta mil pesos?", "H√©ctor Abad Faciolince", "Laura Restrepo", "Fernando Vallejo", "Gabriel Garc√≠a M√°rquez", "Gabriel Garc√≠a M√°rquez");
                }
                break;
            case 2:
                categ2 = new Categoria(10);
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ2.insertar("¬øCu√°l es la obra m√°s famosa del escritor Gabriel Garc√≠a M√°rquez?", "La marquesa de Yolomb√≥", "Cien a√±os de Soledad", "El Karina", "El coronel no tiene qui√©n le escriba", "Cien a√±os de Soledad");
                } else {
                    categ2.insertar("¬øCu√°l es la capital del departamento Valle del Cauca?", "Popay√°n", "Buenaventura", "Cali", "Buga", "Cali");
                }
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ2.insertar("¬øCu√°l cantante barranquillera se dio a conocer en Colombia por su disco ‚ÄúPies descalzos‚Äù?", "Shakira", "Marbelle", "Fanny Lu", "Karol G", "Shakira");
                } else {
                    categ2.insertar("¬øCu√°l es la flor nacional de Colombia?", "Lirio", "Margarita", "Clavel", "Orqu√≠dea", "Orqu√≠dea");
                }
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ2.insertar("¬øEn cu√°l ciudad se encuentra el Cerro de Monserrate?", "Cali", "Bogot√°", "Medell√≠n", "Barranquilla", "Bogot√°");
                } else {
                    categ2.insertar("¬øEn cu√°l municipio de Cundinamarca se puede visitar la √∫nica Catedral de sal que se conoce en el mundo?", "Cota", "Tenjo", "Zipaquir√°", "Soacha", "Zipaquir√°");
                }
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ2.insertar("¬øCu√°l de los siguientes parques NO pertenece a Medell√≠n?", "Parque de los Deseos", "Parque Astorga", "Parque de los Pies Descalzos", "Parque de Usaqu√©n", "Parque de Usaqu√©n");
                } else {
                    categ2.insertar("¬øCu√°l festividad colombiana es considerada patrimonio de la humanidad?", "Carnaval de Barranquilla", "Feria de las Flores", "Festival de verano", "Carnaval de blancos y negros", "Carnaval de Barranquilla");
                }
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ2.insertar("¬øCu√°l es el d√≠a nacional en el que se rememora la batalla de Boyac√°?", "20 de julio", "12 de octubre", "7 de agosto", "13 de noviembre", "7 de agosto");
                } else {
                    categ2.insertar("¬øCu√°l es el d√≠a nacional en el que se celebra el grito de Independencia?", "11 de agosto", "12 de octubre", "7 de agosto", "20 de julio", "20 de julio");
                }
                break;
            case 3:
                categ3 = new Categoria(15);
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ3.insertar("¬øCu√°l ciudad es conocida como ‚ÄúLa capital musical de Colombia‚Äù?", "Medell√≠n", "Bucaramanga", "Ibagu√©", "Barranquilla", "Ibagu√©");
                } else {
                    categ3.insertar("¬øDe cu√°l regi√≥n de Colombia son comidas t√≠picas el tamal y la lechona?", "Tolima", "Llanos Orientales", "Eje cafetero", "Antioquia", "Tolima");
                }
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ3.insertar("¬øCu√°l deporte practicaba la campeona mundial Cecilia ‚ÄúLa Chechi‚Äù Baena?", "F√∫tbol", "Patinaje", "Voleibol", "Nataci√≥n", "Patinaje");
                } else {
                    categ3.insertar("¬øDe cu√°l regi√≥n colombiana es caracter√≠stico el deporte del ‚Äúcoleo‚Äù?", "Andina", "Pac√≠fica", "Caribe", "Orinoqu√≠a", "Orinoqu√≠a");
                }
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ3.insertar("¬øCu√°l poblaci√≥n boyacense es reconocida por el trabajo en cer√°mica de sus artesanos?", "Paipa", "Duitama", "R√°quira", "Ninguna de las anteriores", "R√°quira");
                } else {
                    categ3.insertar("El r√≠o Orinoco atraviesa un importante sector del pa√≠s y se encuentra entre:", "Colombia y Venezuela", "Colombia y Per√∫", "Colombia y Brasil", "Colombia y Panam√°", "Colombia y Venezuela");
                }
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ3.insertar("¬øEn cu√°l departamento se encuentra ubicada la mina de carb√≥n colombiana ‚ÄúEl Cerrej√≥n‚Äù?", "Bol√≠var", "Guajira", "Santander", "Huila", "Guajira");
                } else {
                    categ3.insertar("¬øEn cu√°l ciudad muri√≥ Sim√≥n Bol√≠var?", "Caracas", "Cali", "Bogot√°", "Santa Marta", "Santa Marta");
                }
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ3.insertar("¬øQui√©n gan√≥ la primera medalla de oro ol√≠mpica para Colombia?", "Mariana Paj√≥n", "Mar√≠a Isabel Urrutia", "Sandra Lorena Arenas", "Anthony Zambrano", "Mar√≠a Isabel Urrutia");
                } else {
                    categ3.insertar("¬øEn qu√© a√±o gan√≥ Mar√≠a Isabel Urrutia la primera medalla de oro ol√≠mpica para Colombia?", "1996", "2005", "2004", "2000", "2000");
                }
                break;
            case 4:
                categ4 = new Categoria(25);
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ4.insertar("¬øCu√°l es el ritmo caracter√≠stico de los llanos colombo-venezolanos?", "Joropo", "Bambuco", "Mapal√©", "Merengue", "Joropo");
                } else {
                    categ4.insertar("¬øCu√°l es considerado el punto m√°s al norte de Colombia dentro del continente?", "Rioacha", "Punta Bol√≠var", "Punta Gallinas", "Ninguna de las anteriores", "Punta Gallinas");
                }
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ4.insertar("¬øCu√°l isla sobre el oc√©ano Pac√≠fico colombiano fue utilizada como c√°rcel durante muchos a√±os?", "San Andr√©s", "Gal√°pagos", "Malpelo", "Gorgona", "Gorgona");
                } else {
                    categ4.insertar("¬øCu√°l famoso compositor colombiano es recordado por canciones como ‚ÄúLa casa en el aire‚Äù o ‚ÄúEl Testamento‚Äù?", "H√©ctor Ochoa", "Emiliano Zuleta", "Rafael Escalona", "Lucho Berm√∫dez", "Rafael Escalona");
                }
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ4.insertar("¬øCu√°l es la principal poblaci√≥n colombiana sobre la ribera del R√≠o Amazonas?", "Leticia", "Puerto Carre√±o", "Tumaco", "Ninguna de las anteriores", "Leticia");
                } else {
                    categ4.insertar("¬øEn cu√°l ciudad se encuentra el monumento de ‚ÄúBol√≠var desnudo‚Äù?", "Barranquilla", "Pereira", "Cali", "Cartagena", "Pereira");
                }
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ4.insertar("¬øEn cu√°l regi√≥n de Colombia se encuentra la laguna de Guatavita?", "Caribe", "Pac√≠fica", "Amazon√≠a", "Andina", "Andina");
                } else {
                    categ4.insertar("¬øCu√°l departamento colombiano se caracteriza por ser una de las zonas m√°s lluviosas del mundo?", "Choc√≥", "Tolima", "Magdalena", "Putumayo", "Choc√≥");
                }
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ4.insertar("¬øCu√°l r√≠o atraviesa a Monter√≠a?", "Pat√≠a", "Sin√∫", "Magdalena", "San Jorge", "Sin√∫");
                } else {
                    categ4.insertar("¬øEn cu√°l departamento colombiano se encuentra el parque arqueol√≥gico de San Agust√≠n?", "Casanare", "Magdalena", "Huila", "Vichada", "Huila");
                }
                break;
            case 5:
                categ5 = new Categoria(50);
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ5.insertar("¬øCon cu√°l otro nombre es conocido el deporte aut√≥ctono colombiano denominado Turmequ√©?", "Tejo", "Sapo", "Bolo Criollo", "Coleo", "Tejo");
                } else {
                    categ5.insertar("¬øC√≥mo llamaban los Muiscas a la diosa luna?", "Bochica", "Ch√≠a", "Guatavita", "Palenque", "Ch√≠a");
                }
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ5.insertar("¬øCu√°l mam√≠fero llega cada a√±o para aparearse en las costas de la Ensenada de Utr√≠a en Choc√≥?", "Nutria", "Foca", "Ballena jorobada", "Ballena azul", "Ballena jorobada");
                } else {
                    categ5.insertar("¬øCu√°l comunidad ind√≠gena habita en la Sierra Nevada de Santa Marta?", "Kunas", "Huitotos", "Tukanos", "Arhuacos", "Arhuacos");
                }
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ5.insertar("¬øCu√°l es la poblaci√≥n ubicada en la regi√≥n Caribe de Colombia que es reconocida a nivel mundial como el primer pueblo libre de Am√©rica?", "Punaca", "Palenque", "Mocoa", "Gondria", "Palenque");
                } else {
                    categ5.insertar("¬øCu√°l es la ciudad ubicada en el Amazonas desde donde se puede visitar a Brasil y a Per√∫?", "Puerto Narino", "Tarapaca", "Leticia", "La Victoria", "Leticia");
                }
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ5.insertar("¬øCu√°ntas lenguas tradicionales ind√≠genas en promedio se hablan en Colombia?", "Entre 1 y 10", "Entre 10 y 30", "Entre 30 y 60", "M√°s de 60", "M√°s de 60");
                } else {
                    categ5.insertar("¬øEn cu√°l departamento est√° ubicado Urib√≠a, el pueblo m√°s seco de Colombia?", "Choc√≥", "Arauca", "Cesar", "Guajira", "Choc√≥");
                }
                aleatorio = crearAleatorio(2, 1);
                if (aleatorio == 1) {
                    categ5.insertar("¬øCu√°l es el pueblo considerado como el m√°s fr√≠o de Colombia y que est√° ubicado en el departamento de Nari√±o?", "Pasto", "Aldana", "Tumaco", "Cumbal", "Aldana");
                } else {
                    categ5.insertar("¬øCu√°l es el pueblo menos habitado de Colombia y que est√° ubicado en el departamento de Boyac√°?", "Tunja", "Paipa", "Busbanz√°", "R√°quira", "Busbanz√°");
                }
                break;
            default:
                JOptionPane.showMessageDialog(this, "Ocurri√≥ un error al crear las preguntas de la categor√≠a", "Error al crear categor√≠a", JOptionPane.ERROR_MESSAGE);
                break;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnComenzar;
    private javax.swing.JButton btnContinuar;
    private javax.swing.JButton btnRetirarse;
    private javax.swing.JLabel lblNombreJugador;
    private javax.swing.JLabel lblPregunta;
    private javax.swing.JLabel lblPuntaje;
    private javax.swing.JLabel lblRonda;
    private javax.swing.JTextPane pnlPregunta;
    private javax.swing.JRadioButton rbtnA;
    private javax.swing.JRadioButton rbtnB;
    private javax.swing.JRadioButton rbtnC;
    private javax.swing.JRadioButton rbtnD;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JSeparator separador;
    private javax.swing.JTextField txtNombreJugador;
    private javax.swing.JTextField txtPregunta;
    private javax.swing.JTextField txtPuntaje;
    private javax.swing.JTextField txtRonda;
    // End of variables declaration//GEN-END:variables
}
